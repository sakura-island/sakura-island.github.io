{"version":3,"sources":["styles/index.scss","pages/Home/HomePage.tsx","pages/PageNotFound/PageNotFound.tsx","services/Axios/Axios.ts","services/Navigation/Navigation.ts","router/constants/route-names.ts","router/Router.tsx","store/reducers/index.ts","store/sagas/index.ts","store/index.ts","modules/Root/RootModule.tsx","index.tsx"],"names":["module","exports","HomePage","React","Component","PageNotFound","axios","create","baseURL","headers","common","Accept","Navigation","history","this","path","options","urlParams","locationDescriptor","pathname","Object","keys","forEach","urlParamKey","replace","push","createBrowserHistory","ROUTES","Router","exact","component","Pages","allReducers","combineReducers","rootReducer","state","action","type","undefined","allSagas","store","sagaMiddleware","createSagaMiddleware","allMiddlewares","middleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","saga","run","configureStore","RootModule","ReactDOM","render","document","getElementById"],"mappings":"gJACAA,EAAOC,QAAU,CAAC,MAAQ,OAAO,MAAQ,OAAO,OAAS,UAAU,QAAU,UAAU,QAAU,UAAU,QAAU,UAAU,QAAU,UAAU,QAAU,UAAU,QAAU,UAAU,QAAU,UAAU,QAAU,UAAU,QAAU,Y,0ICChOC,EAAb,iLAEI,OAAO,8CAFX,GAA8BC,IAAMC,WCAvBC,EAAb,iLAEI,OAAO,mDAFX,GAAkCF,IAAMC,W,kBCAME,EAAMC,OAAO,CACzDC,QAAS,qCACTC,QAAS,CACPC,OAAQ,CACN,eAAgB,kCAChBC,OAAQ,uB,ykBCJP,IA6BMC,EAA0C,IA7BvD,WAGE,WAAYC,GAAmB,yBAFtBA,aAEqB,EAC5BC,KAAKD,QAAUA,EAJnB,iDAOOE,GAA0C,IAA9BC,EAA6B,uDAAV,GAE1BC,EAAqCD,EAArCC,UAAcC,EAFsB,YAECF,EAFD,eAIxCG,EAAWJ,EACXE,GAGFG,OAAOC,KAAKJ,GAAWK,QAAQ,SAAAC,GAC7BJ,EAAWA,EAASK,QAAT,WAAqBD,GAArB,UAAuCN,EAAUM,OAKhET,KAAKD,QAAQY,KAAb,KAAuBP,EAAvB,CAA2CC,kBArB/C,KA6BuD,CAH9BO,eC7BZC,EACL,ICMKC,EAAS,kBACpB,kBAAC,IAAD,CAAaf,QAASD,EAAWC,SAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,OAAK,EAACd,KAAMY,EAAaG,UAAWC,IAC3C,kBAAC,EAAD,S,eCLAC,EAAiCC,YAAgB,IAE1CC,EAAc,SAACC,EAA6BC,GAavD,MAVoB,WAAhBA,EAAOC,OAMTF,OAAQG,GAIHN,EAAYG,EAAOC,ICrBfG,EAAW,GCgCXC,EAtBU,WAErB,IAAMC,EAAiBC,cAGjBC,EAAiB,CAACF,GAMlBG,GAHoBC,OAAeC,sCAAwCC,KAG9BC,IAAe,WAAf,EAAmBL,IAGhEH,EAAkBS,YAAYf,EAAaU,GAKjD,OAFAL,EAASjB,QAAQ,SAAC4B,GAAD,OAAsBT,EAAeU,IAAID,KAEnDV,EAGYY,GCxBRC,G,MAAb,iLAII,OACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,EAAD,WANR,GAAgCrC,IAAMC,YCHtCkD,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,W","file":"static/js/main.2b152a08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"black\":\"#000\",\"white\":\"#fff\",\"grey50\":\"#fafafa\",\"grey100\":\"#f5f5f5\",\"grey200\":\"#eeeeee\",\"grey300\":\"#e0e0e0\",\"grey400\":\"#bdbdbd\",\"grey500\":\"#9e9e9e\",\"grey600\":\"#757575\",\"grey700\":\"#616161\",\"grey800\":\"#424242\",\"grey900\":\"#212121\"};","import React from 'react';\r\n\r\nexport class HomePage extends React.Component {\r\n  render() {\r\n    return <div>Home page</div>;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport class PageNotFound extends React.Component {\r\n  render() {\r\n    return <div>Page not found</div>;\r\n  }\r\n}\r\n","import axios, { AxiosInstance } from 'axios';\r\n\r\nexport const Axios: Readonly<AxiosInstance> = axios.create({\r\n  baseURL: 'https://wispy-cross.herokuapp.com/',\r\n  headers: {\r\n    common: {\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n      Accept: 'application/json',\r\n    },\r\n  },\r\n});\r\n","import { createBrowserHistory, History, Path } from 'history';\r\nimport { Navigation as NavigationService, Options } from './Navigation.types';\r\n\r\nexport class NavigationClass {\r\n  readonly history: History;\r\n\r\n  constructor(history: History) {\r\n    this.history = history;\r\n  }\r\n\r\n  goTo(path: Path, options: Options = {}): void {\r\n    // Separate custom options from default history.push/replace options\r\n    const { urlParams, ...locationDescriptor } = options;\r\n\r\n    let pathname = path;\r\n    if (urlParams) {\r\n      // Replace all the path params with their values\r\n      // Example: given urlParams = { id: 15 } path \"/users/:id\" becomes \"/users/15\"\r\n      Object.keys(urlParams).forEach(urlParamKey => {\r\n        pathname = pathname.replace(`:${urlParamKey}`, `${urlParams[urlParamKey]}`);\r\n      });\r\n    }\r\n\r\n    // TODO: maybe don't redirect if pathname, state, etc. are completely the same\r\n    this.history.push({ ...locationDescriptor, pathname });\r\n  }\r\n}\r\n\r\n// Create a history of your choosing (we're using a browser history in this case)\r\nconst history: History = createBrowserHistory();\r\n\r\n// Create a Navigation service\r\nexport const Navigation: Readonly<NavigationService> = new NavigationClass(history);\r\n","export const ROUTES = {\r\n  Home: '/',\r\n};\r\n","import React from 'react';\r\nimport { Route, Router as ReactRouter, Switch } from 'react-router-dom';\r\n\r\nimport * as Pages from 'pages';\r\nimport { Navigation } from 'services';\r\nimport { ROUTES } from './constants';\r\n\r\nexport const Router = () => (\r\n  <ReactRouter history={Navigation.history}>\r\n    <Switch>\r\n      <Route exact path={ROUTES.Home} component={Pages.HomePage} />\r\n      <Pages.PageNotFound />\r\n    </Switch>\r\n  </ReactRouter>\r\n);\r\n","import { AnyAction, combineReducers, Reducer } from 'redux';\r\n\r\nimport { AppState } from 'types';\r\n\r\n// Combine all application reducers to delegate them to\r\n// the root reducer that will be exported to the store\r\nconst allReducers: Reducer<AppState> = combineReducers({});\r\n\r\nexport const rootReducer = (state: AppState | undefined, action: AnyAction): AppState => {\r\n  // Handle logout on the global level to reset the whole Redux store and as a\r\n  // result application state so we don't need to reset each reducer separately.\r\n  if (action.type === 'logout') {\r\n    // Reassign the reference of a local variable called `state` to `undefined` before\r\n    // passing it to another reducer. Reducers are supposed to return the initial state\r\n    // when they are called with `undefined` as the first argument, no matter the action.\r\n    // Please note that some data still should stay in the store to not to face unexpected\r\n    // behaviour.\r\n    state = undefined;\r\n  }\r\n\r\n  // Delegate handling the action to the reducer generated by `combineReducers()`\r\n  return allReducers(state, action);\r\n};\r\n","export const allSagas = [];\r\n","import { applyMiddleware, compose, createStore, Store, StoreEnhancer } from 'redux';\r\nimport createSagaMiddleware, { Saga, Task } from 'redux-saga';\r\n\r\nimport { AppState } from 'types';\r\n\r\nimport { rootReducer } from './reducers';\r\nimport { allSagas } from './sagas';\r\n\r\ntype AppStore = Store<AppState>;\r\n\r\nconst configureStore = (): AppStore => {\r\n  // Create saga middleware\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  // Gather all middlewares\r\n  const allMiddlewares = [sagaMiddleware];\r\n\r\n  // Enhance compose function with different enhancers\r\n  const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n  // Compose all middlewares\r\n  const middleware: StoreEnhancer = composeEnhancers(applyMiddleware(...allMiddlewares));\r\n\r\n  // Create Redux store\r\n  const store: AppStore = createStore(rootReducer, middleware);\r\n\r\n  // Apply all Sagas\r\n  allSagas.forEach((saga: Saga): Task => sagaMiddleware.run(saga));\r\n\r\n  return store;\r\n};\r\n\r\nexport const store = configureStore();\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { Router } from 'router';\r\nimport { store } from 'store';\r\nimport 'styles/index.scss';\r\n\r\nexport class RootModule extends React.Component {\r\n  // RENDER\r\n\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { RootModule } from 'modules';\r\n\r\nReactDOM.render(<RootModule />, document.getElementById('root'));\r\n"],"sourceRoot":""}